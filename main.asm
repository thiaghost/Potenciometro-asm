
.EQU ATRASO = 75000
RESET:
	LDI R16, LOW(RAMEND)
	OUT SPL, R16
	LDI R16, HIGH(RAMEND)
	OUT SPH, R16
INIT_SERIAL:
	LDI R16, 0x02 ; UCSR0A = 2
	STS UCSR0A, R16
	LDI R16, 0x08 ; UCSR0B = 8
	STS UCSR0B, R16
	LDI R16, 0x06 ; UCSR0C = 6
	STS UCSR0C, R16
	LDI R16, 0x00 ; UBRR0 = 207
	STS UBRR0H, R16
	LDI R16, 207
	STS UBRR0L, R16
INIT_ADC:
	LDI R16, 0x87 ; ADCSRA = 0X87
	STS ADCSRA, R16
	LDI R16, 0x40 ; ADMUX = 0X40
	STS ADMUX, R16
MAIN:
	CLR R22
	CLR R23
	LDI R24, 8 ; CONTADOR DE LOOP
LOOP_MEDIA:
	LDI R16, LOW(ATRASO)
	LDI R17, HIGH(ATRASO)
	LDI R18, BYTE3(ATRASO)
	RCALL DELAY
	RCALL READ_ADC ; RESULTADO DO ADC = R13:R12
	ADD R22, R12 ; R23:R22 = R23:R22 + R13:R12
	ADC R23, R13
	DEC R24
	CPI R24, 0
	BRNE LOOP_MEDIA
	// DIVISÃO: R23:R22 / 8 = R23:R22 >> 3
	LSR R23
	ROR R22
	LSR R23
	ROR R22
	LSR R23
	ROR R22
	LDI R19, 'T'
	RCALL TX
	LDI R19, 'h'
	RCALL TX
	LDI R19, 'i'
	RCALL TX
	LDI R19, 'a'
	RCALL TX
	LDI R19, 'g'
	RCALL TX
	LDI R19, 'o'
	RCALL TX
	LDI R19, ' '
	RCALL TX
	LDI R19, ':'
	RCALL TX
	LDI R19, ' '
	RCALL TX
	LDI R19, 'A'
	RCALL TX
	LDI R19, 'D'
	RCALL TX
	LDI R19, 'C'
	RCALL TX
	LDI R19, '='
	RCALL TX
	LDI R19, '0'
	RCALL TX
	LDI R19, 'x'
	RCALL TX
	MOV R21, R23
	RCALL U8_TO_HEX
	MOV R21, R22
	RCALL U8_TO_HEX
	LDI R19, '='
	RCALL TX
	RCALL U16_TO_DEC
	MOV R19, R25
	RCALL TX
	MOV R19, R26
	RCALL TX
	MOV R19, R27
	RCALL TX
	MOV R19, R28
	RCALL TX
	LDI R19, ' '
	RCALL TX
	LDI R19, 'V'
	RCALL TX
	LDI R19, 'i'
	RCALL TX
	LDI R19, 'n'
	RCALL TX
	LDI R19, '='
	RCALL TX
	MOV R3, R23
	MOV R2, R22
	MOV R17, R23
	MOV R16, R22
	LDI R19, HIGH(5000)
	LDI R18, LOW(5000)	RCALL MULT16X16
	LSR R23
	ROR R22
	ROR R21
	LSR R23
	ROR R22
	ROR R21
	MOV R23, R22
	MOV R22, R21
	RCALL U16_TO_DEC
	MOV R19, R25
	RCALL TX
	LDI R19, '.'
	RCALL TX
	MOV R19, R26
	RCALL TX
	MOV R19, R27
	RCALL TX
	MOV R19, R28
	RCALL TX
	LDI R19, 'V'
	RCALL TX
	LDI R19, ' '
	RCALL TX
	LDI R19, 10
	RCALL TX
	RJMP MAIN
READ_ADC:
	; ADCSRA.ADSC = 1
	LDS R16, ADCSRA ; R16 = ADCSRA
	SBR R16, (1<<ADSC) ; R16 = R16 | (1<<ADSC);
	STS ADCSRA, R16 ; ADCSRA = R16;
WAIT_ADC_READY: ; while (ADCSRA.ADSC == 1);
	LDS R3, ADCSRA
	SBRC R3, ADSC
	RJMP WAIT_ADC_READY
	LDS R12, ADCL ; R12 = ADCL
	LDS R13, ADCH ; R13 = ADCH
	RET
U16_TO_DEC: ; SUPONDO QUE O NUMERO SEJA R22,
	; milhar R25
	; centena R26
	; dezena r27	; unidade r28
	; temp r29
	CLR R25
	CLR R26
	CLR R27
	CLR R28
	MOV R30, R23
	MOV R29, R22
	LDI R17, HIGH(1000)
	LDI R16, LOW(1000)
MILHAR:
	CP R29, R16 ;[R30:R29] >= 1000 ?
	CPC R30, R17
	BRSH MILHAR_CONT
	LDI R17, HIGH(100)
	LDI R16, LOW(100)
	RJMP CENTENA
MILHAR_CONT:
	SUB R29, R16 ; [R30:R29] -= 1000
	SBC R30, R17
	INC R25
	RJMP MILHAR
CENTENA:
	CP R29, R16 ;[R30:R29] >= 100 ?
	CPC R30, R17
	BRSH CENT_CONT
	RJMP DEZENA
CENT_CONT:
	SUB R29, R16 ; [R30:R29] -= 100
	SBC R30, R17
	INC R26
	RJMP CENTENA
DEZENA:
	CPI R29, 10
	BRSH DEZ_CONT
	RJMP UNIDADE
DEZ_CONT:
	SUBI R29, 10
	INC R27
	RJMP DEZENA
UNIDADE:
	MOV R28, R29
	SUBI R25, -48
	SUBI R26, -48
	SUBI R27, -48
	SUBI R28, -48
	RET
U8_TO_HEX:	MOV R20, R21
	SWAP R20
	ANDI R20, 0b00001111
	RCALL U4_TO_HEX
	RCALL TX
	MOV R20, R21
	ANDI R20, 0b00001111
	RCALL U4_TO_HEX
	RCALL TX
	RET
U4_TO_HEX:
	CPI R20, 10
	BRLT MENOR_DEZ
MAIOR_DEZ:
	LDI R19, 55
	ADD R19, R20
	RET
MENOR_DEZ:
	LDI R19, 48
	ADD R19, R20
	RET
	; R18:R17:R16 É O Parametro de tempo em microsegundos
TX:
	LDS R3, UCSR0A
	SBRS R3, UDRE0
	RJMP TX
	STS UDR0, R19
	RET
MULT16X16:
	CLR R2 ; Zera R2
	MUL R17, R19 ; Multiplica MSB
	MOVW R23:R22, R1:R0 ; Move a resposta para o Resultado
	MUL R16, R18 ; Multiplica LSB
	MOVW R21:R20, R1:R0 ; Move a resposta para o Resultado
	MUL R17, R18 ; Multiplica MSB_1 x LSB_2
	ADD R21, R0 ; Soma a resposta no Resultado
	ADC R22, R1
	ADC R23, R2
	MUL R16, R19 ; Multiplica LSB_1 x MSB_2
	ADD R21, R0 ; Soma a resposta no Resultado
	ADC R22, R1
	ADC R23, R2
	RET
DELAY:
	SUBI R16, 1
	SBCI R17, 0
	SBCI R18, 0
	CLR R0 ; R0 = 0
	CP R16, R0 ; R16 == 0 ?
	CPC R17, R0 ; R17 == 0 ? & z==0 ?
	CPC R18, R0 ; R18 == 0 ? & z==0 ?
	BREQ FIM_DELAY	NOP
	NOP
	NOP
	NOP
	NOP
	NOP
	RJMP DELAY
FIM_DELAY:
	RET